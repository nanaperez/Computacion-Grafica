/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reto2;

import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.*;

/**
 *
 * @author Sebastian Lopez, Juan Manuel Mejia y Alejandra Perez
 */

public class Interfaz extends JFrame {

    /**
     * Creates new form Interfaz
     */
    
    private boolean secondTime = false;
    private Vertex start, end;
    private final Graphics2D gr;
    private final int INSIDE = 0; //This variable is for Sutherland Algorithm
    private final int LEFT = 1;   //This variable is for Sutherland Algorithm
    private final int RIGHT = 2;  //This variable is for Sutherland Algorithm
    private final int BOTTOM = 4; //This variable is for Sutherland Algorithm
    private final int TOP = 8;    //This variable is for Sutherland Algorithm
    private int xmin, xmax, ymin, ymax;
    private PolygonObject figure;
    boolean sutherland = false;
    
    public Interfaz() {
        initComponents();
        gr = (Graphics2D) jPanel2.getGraphics();
        figure = getPolygon("inputFile/newFile");
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Dibujar Figura");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jRadioButton1.setBackground(new java.awt.Color(204, 204, 255));
        jRadioButton1.setText("Cohen-Sutherland");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setBackground(new java.awt.Color(204, 204, 255));
        jRadioButton2.setText("Liang-Barsky");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("?");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("J.A.S Software");

        jLabel1.setText("Ejecucion");

        jTextField1.setEditable(false);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("milisegundos.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 94, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(55, 55, 55)
                                .addComponent(jButton3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 259, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
        secondTime = !secondTime;
        gr.setColor(Color.BLUE);
        if(!secondTime){
            //xmax = evt.getX();
            //ymax = evt.getY();
            end = new Vertex(evt.getX(), evt.getY());
            if(start.x < end.x){
                xmin = start.x;
                xmax = end.x;
            }
            else{
                xmin = end.x;
                xmax = start.x;
            }
            if(start.y < end.y){
                ymin = start.y;
                ymax = end.y;
            }
            else{
                ymin = end.y;
                ymax = start.y;
            }
            gr.drawLine(end.x, end.y, end.x, end.y);
            Vertex pointUpToStart = new Vertex(start.x, end.y);
            Vertex pointUnderEnd = new Vertex(end.x, start.y);
            PolygonObject clippedArea = new PolygonObject();
            clippedArea.addEdge(new Edge(start, pointUpToStart));
            clippedArea.addEdge(new Edge(pointUpToStart, end));
            clippedArea.addEdge(new Edge(end, pointUnderEnd));
            clippedArea.addEdge(new Edge(pointUnderEnd, start));
            clippedArea.drawObject(gr);
            whichMethod(sutherland);
            //gr.drawRect(start.x, start.y,Math.abs(start.x - end.x), Math.abs(start.y - end.y));
        }
        else{
            xmin = evt.getX();
            ymin = evt.getY();
            start = new Vertex(evt.getX(), evt.getY());
            //gr.clearRect(0, 0, jPanel2.getWidth(), jPanel2.getHeight());
            gr.drawLine(start.x, start.y, start.x, start.y);
        }
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        info();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        //Liang
        sutherland = false;
        jRadioButton1.setSelected(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        //Sutherland
        sutherland = true;
        jRadioButton2.setSelected(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        gr.setColor(Color.RED);
        figure = getPolygon("inputFile/newFile");
        figure.drawObject(gr);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        gr.clearRect(0, 0, jPanel2.getWidth(), jPanel2.getHeight());
        secondTime = false;
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void info(){
        JOptionPane.showMessageDialog(null, 
            "Primero pulsa Dibujar figurita. \n" +
            "A continuación, das click sobre donde deseas poner el primer punto,\n" +
            "luego click donde pondrás el segundo punto para dibujar el rectángulo.\n"
            , "Información",
            JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void whichMethod(boolean choice){
        if(choice){
            long startTime = System.currentTimeMillis();
            figure.edges.stream().forEach((edge) -> {  
                cohenSutherland(edge, Color.GREEN, gr);
            });
            long endTime = System.currentTimeMillis();
            long durationCS = (endTime - startTime); 
            jTextField1.setText(durationCS + "");
        }
        else{
            long startTime = System.currentTimeMillis();
            figure.edges.stream().forEach((edge) -> {
                liangBarsky(edge, Color.GREEN, gr);
            });
            long endTime = System.currentTimeMillis();
            long durationLB = (endTime - startTime); 
            jTextField1.setText(durationLB + "");
        }
    }

    private PolygonObject getPolygon(String file){
        
        Scanner scanner;
        try{
            File in = new File(file);
            scanner = new Scanner(in);
            PolygonObject figure = new PolygonObject();
            int numberOfVertex = scanner.nextInt();
            Vertex verts[] = new Vertex[numberOfVertex];
            for(int i = 0; i < numberOfVertex; i++){
                int x = scanner.nextInt();
                int y = scanner.nextInt();
                verts[i] = new Vertex(x,y);
            }
            int numberOfEdges = scanner.nextInt();
            for(int i = 0; i < numberOfEdges; i++){
                int first = scanner.nextInt();
                int last = scanner.nextInt();
                figure.addEdge(new Edge(verts[first],verts[last]));
            }
            scanner.close();
            return figure;
        }
        catch(FileNotFoundException e){    
        }
        return null;
    }
    
    private int computeOutCode(int x, int y){

        int code = INSIDE;
        if (x < xmin)           //Left of the clip window
		code |= LEFT;
	else if (x > xmax)      //Right of the clip window
		code |= RIGHT;
	if (y < ymin)           //Bottom of the clip window
		code |= BOTTOM;
	else if (y > ymax)      //Top of the clip window
		code |= TOP;
	return code;
    }
    
    private void cohenSutherland(Edge edge, Color color, Graphics2D gr){
	
        System.out.println("\n Executing Cohen-Sutherland Algorithm...");
        
        //compute outcodes for P0, P1, and whatever point lies outside the clip rectangle
	int outCode0 = computeOutCode(edge.start.x, edge.start.y);
	int outCode1 = computeOutCode(edge.end.x, edge.end.y);
	boolean accept = false;
        int x0 = edge.start.x, x1 = edge.end.x, y0 = edge.start.y, y1 = edge.end.y;
	while (true) {
            if(!((outCode0 | outCode1) != 0)){ //Bitwise OR is 0. Trivially accept and get out of loop.
		accept = true;
		break;
            } 
            else if((outCode0 & outCode1) != 0){ //Bitwise AND is not 0. Trivially reject and get out of loop
                break;
            } 
            else{
                //Failed both tests, so calculate the line segment to clip
                //from an outside point to an intersection with clip edge
                double x = 0, y = 0;
		//At least one endpoint is outside the clip rectangle
		int outCodeOut;
                if(outCode0 != 0){
                    outCodeOut = outCode0;
                }
                else{
                    outCodeOut = outCode1;
                }
                //int outcodeOut = outcode0 ? outcode0 : outcode1;
                //Now find the intersection point
		if((outCodeOut & TOP) != 0){           //Point is in the Top of the clip rectangle
                    x = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0);
                    y = ymax;
		} 
                else if((outCodeOut & BOTTOM) != 0){ //Point is on the Bottom of the clip rectangle
                    x = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0);
                    y = ymin;
		} 
                else if((outCodeOut & RIGHT) != 0){  //Point is to the Right of the clip rectangle
                    y = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0);
                    x = xmax;
		} 
                else if((outCodeOut & LEFT) != 0){   //Point is to the Left of the clip rectangle
                    y = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0);
                    x = xmin;
		}
		//Now we move outside point to intersection point to clip
		//and get ready for next pass.
		if(outCodeOut == outCode0){
                    x0 = (int)Math.round(x);
                    y0 = (int)Math.round(y);
                    outCode0 = computeOutCode(x0, y0);
                } 
                else{
                    x1 = (int)Math.round(x);
                    y1 = (int)Math.round(y);
                    outCode1 = computeOutCode(x1, y1);
                }
            }
	}
	if(accept){
            gr.setColor(color);
            gr.drawLine(x0, y0, x1, y1);
	}
    }
    
    private void liangBarsky(Edge edge, Color color, Graphics2D gr){
        
        System.out.println("\nExecuting Liang-Barsky Algorithm...");
        double u1 = 0, u2 = 1;
        int x0 = edge.start.x, y0 = edge.start.y, x1 = edge.end.x, y1 = edge.end.y;
        int dx = x1 - x0, dy = y1 - y0;
        int p[] = {-dx, dx, -dy, dy};
        int q[] = {x0 - xmin, xmax - x0, y0 - ymin, ymax - y0};
        for(int i = 0; i < 4; i++){
            if(p[i] == 0){
                if(q[i] < 0){
                    return;
                }
            } 
            else{
                double u = (double) q[i] / p[i];
                if(p[i] < 0){
                    u1 = Math.max(u, u1);
                } 
                else{
                    u2 = Math.min(u, u2);
                }
            }
        }
        if(u1 > u2){
            return;
        }
        int nx0, ny0, nx1, ny1;
        nx0 = (int) (x0 + u1 * dx);
        ny0 = (int) (y0 + u1 * dy);
        nx1 = (int) (x0 + u2 * dx);
        ny1 = (int) (y0 + u2 * dy);
        gr.setColor(color);
        gr.drawLine(nx0, ny0, nx1, ny1);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Interfaz interfaz = new Interfaz();
                //Pone la interfaz en el centro de la pantalla cuando se ejecuta
                interfaz.setLocationRelativeTo(null);
                //No se puede cambiar de tamaño de la interfaz
                interfaz.setResizable(false);
                //Muesta la interfaz -->true
                interfaz.setVisible(true);
                //Al cerrar la interfaz, termina la ejecución de este programa
                interfaz.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                
                //Troll
                JOptionPane.showMessageDialog(null, 
                    "Error en la activación del Producto \n" +
                    "Señor: Helmuth Trefftz, usted todavia no ha adquirido \n" +
                    "la licencía de este producto.",
                    "regExp error",
                JOptionPane.ERROR_MESSAGE);
            }
        });
    }
}